name: build_packages

on:
  workflow_call:
  workflow_dispatch:

env:
  DEBIAN_RSYNC_TARGET: /appdata/static/apt/amd64
  DRONE_BUILD_NUMBER: ${{ github.run_number }}
  RSYNC_USER: docs
  RSYNC_HOST: ijzer
jobs:
  build-linux:
    runs-on: [self-hosted, linux]
    container: registry.fluves.net/drone/cn_ws/conda-cn_ws:0.1
    env:
      PYTHONPATH: ../CNWS-processing-scripts/pycnws/src
    steps:
      - uses: actions/checkout@v3
      - name: build linux
        run: |
          git fetch --tags
          git lfs pull
          make

      - name: test cnws runs without error
        run: |
          testfiles/test.sh

      - name: CNWS-processing repo for python tests
        shell: bash
        run: |
          source /etc/profile.d/conda.sh
          conda activate cn_ws
          pytest testfiles

  build-conda:
    runs-on: [self-hosted, linux]
    container: registry.fluves.net/drone/cn_ws/conda
    env:
      DRONE_COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
      CONDA_BUILD: /.build/conda_build
      GIT_DESCRIBE_TAG: ${{ github.run_number }}
      GIT_BUILD_STR: ${{ github.run_number }}
    steps:
      - name: set build string
        shell: bash
        run: |
          if [[  ${{ contains(github.ref , 'refs/tags/') }} ]]; then
            GIT_DESCRIBE_TAG=${{  github.ref_name }}
          fi
          echo $GIT_DESCRIBE_TAG
          exit 0
      - uses: actions/checkout@v3
      - name: build conda package
        shell: bash
        run: |
          git fetch --tags 
          git lfs pull
          mkdir -p $CONDA_BUILD
          conda build . --output-folder $CONDA_BUILD
          conda index $CONDA_BUILD
          ls -R $CONDA_BUILD

      - uses: actions/upload-artifact@master
        with:
          name: conda-output
          path: /.build/conda_build

  build-debian:
    runs-on: [self-hosted, linux]
    container: registry.fluves.net/drone/cn_ws/debian11-build
    env:
      DEBFULLNAME: "Fluves Drone CI"
      DEBEMAIL: donotreply@fluves.net
    steps:
      - uses: actions/checkout@v3
      - name: build debian package
        run : |
          git fetch --tags
          git lfs pull
          gbp dch --snapshot --ignore-branch --snapshot-number=$DRONE_BUILD_NUMBER
          debuild -b
          mkdir /package
          mv ../cn-ws*amd64* /package
      - uses: actions/upload-artifact@master
        with:
          name: debian-output
          path: /package
          
  build-documentation:
    needs: [build-debian,build-linux, build-conda]
    runs-on: [self-hosted, linux]  
    container: registry.fluves.net/drone/cn_ws/conda
    steps:
      - uses: actions/checkout@v3
      - name: fetch tags
        shell: bash
        run: |
          git fetch --tags
          git lfs pull

      - name: build website
        shell: bash
        run: |
          pip install -r ./docs/requirements.txt
          sphinx-build ./docs ./docs/_build/

      - uses: actions/upload-artifact@master
        with:
          name: documentation-output
          path: ./docs

  # build-windows:
  #   runs-on: [self-hosted, windows] 
  #   container: registry.fluves.net/drone/cn_ws/lazarus-windows
  #   steps: 
  #     - uses: actions/checkout@v3
  #     - name: fetch tags
  #       run: |
  #         git fetch --tags 
  #         git lfs pull

  #     - name: build compiled version
  #       run: |
  #         c:\lazarus\lazbuild.exe cn_ws\cn_ws.lpr
  #         c:\lazarus\fpc\3.2.0\bin\x86_64-win64\strip.exe cn_ws\cn_ws.exe

  #     - name: run tests
  #       run: |
  #         .\testfiles\test.bat

  #     - name: build conda package
  #       run: |
  #         get-content c:/users/ContainerAdministrator/_netrc | out-file -encoding ASCII c:/users/ContainerAdministrator/_netrc_ascii
  #         del c:/users/ContainerAdministrator/_netrc
  #         mv c:/users/ContainerAdministrator/_netrc_ascii c:/users/ContainerAdministrator/_netrc
  #         conda build conda --output-folder conda_build